package pij.day14.graph;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

/**
 * Models a directed graph where nodes contain data objects and are connected
 * by directed edges.
 */
public class Graph<E> {
    /** The nodes of this Graph. May neither be nor contain null. */
    private final List<Node<E>> nodes;

    /**
     * Constructs a Graph without any nodes or edges.
     */
    public Graph() {
        this.nodes = new ArrayList<>();
    }

    /**
     * Adds a new node storing <code>data</code> to this Graph.
     * Returns the index of the node generated by the operation.
     *
     * @param data the data value to store in the new node
     * @return the index of the node generated by the operation
     */
    public int addNode(E data) {
        Node<E> node = new Node<>(data);
        this.nodes.add(node);
        return this.nodes.size() - 1; // the node was added here
    }

    /**
     * Adds an edge from the node at <code>srcIndex</code> to the node at
     * <code>destIndex</code>. Returns whether a new edge was added by
     * this method call (an edge is not added if it was already present in
     * this Graph).
     *
     * @param srcIndex the index of the source node for the edge
     * @param destIndex the index of the destination node for the edge
     * @return whether a new edge was added by this method call
     * @throws IndexOutOfBoundsException if srcIndex < 0 or
     *  srcIndex >= this.size() or destIndex < 0 or destIndex >= this.size()
     */
    public boolean addEdge(int srcIndex, int destIndex) {
        Node<E> src = this.nodes.get(srcIndex);
        Node<E> dest = this.nodes.get(destIndex);
        return src.addEdgeTo(dest);
    }

    /**
     * Returns the total number of nodes in this Graph.
     *
     * @return the total number of nodes in this Graph
     */
    public int size() {
        return this.nodes.size();
    }

    /**
     * Returns the number of nodes reachable from the node at
     * <code>fromIndex</code>.
     *
     * @param fromIndex the index of the node from which we want to
     *                  know how many nodes we can reach in this Graph
     * @return the number of nodes reachable from the node at
     *         <code>fromIndex</code>
     * @throws IndexOutOfBoundsException if fromIndex < 0 or
     *  fromIndex >= this.size()
     */
    public int sizeFrom(int fromIndex) {
        Node<E> startNode = this.nodes.get(fromIndex);
        return startNode.size(new HashSet<>());
    }

    /**
     * Returns a list with the data stored in the nodes that are reachable
     * from the node at <code>fromIndex</code>.
     *
     * @param fromIndex the index of the node from which we want to collect
     *                  the data in this Graph
     * @return a list with the data stored in the nodes that are reachable
     *         from the node at <code>fromIndex</code>.
     * @throws IndexOutOfBoundsException if fromIndex < 0 or
     *  fromIndex >= this.size()
     */
    public List<E> getDataFrom(int fromIndex) {
        List<E> result = new ArrayList<>();
        Node<E> startNode = this.nodes.get(fromIndex);
        startNode.collectData(result, new HashSet<>());
        return result;
    }
}
